#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
export KEYTIMEOUT=1
export VISUAL=vim
export EDITOR="$VISUAL"
export KUBE_EDITOR=vim
export GOPATH=$HOME/dev/go
export TERM=xterm-256color
alias ls=exa
alias l=exa -l
alias cat=bat
alias k=kubectl
alias watch='watch '
alias wkhtmltopdf=/usr/bin/wkhtmltopdf
alias glg="git log --graph --oneline "
alias gls="git log --pretty=format:'%C(cyan)%h %C(magenta)%<(20)%an %C(white)%ci %C(cyan)%d %n %C(yellow)%s%n' -5"
alias vim=nvim
alias kl='kubectl logs --tail=100 -f '
alias km='watch kubectl get pods -n '
alias kp='watch kubectl top pods -n '
alias kg='kubectl get '
alias gst='git status'
alias gu='git checkout devel && git pull'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gdf='git diff'
alias deploy='git checkout devel && git pull && git checkout master && git pull && git merge devel && git push'
alias cl='clear'
alias ktx='kubectx'
alias kex='kubectl exec -it '
alias gup=updateBranch
alias uo=getOrder
alias uu=getUser
alias curl=curlie

bindkey -v
bindkey "^R" history-incremental-search-backward

export PATH=$PATH:/home/edgardo/scripts-git


export PATH="$PATH:$HOME/.bin/custom-git-commands:$HOME/.local/bin"
export PATH="$PATH:$HOME/dev/tools/flutter/bin"
export PATH="$PATH:/opt/flutter/bin"
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_CTRL_R_OPTS='--sort --exact'
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

source $HOME/.dotfiles/environment_variables

export MOZ_USE_XINPUT2=1
export KUBE_EDITOR=vim



cwm(){ 

    ffmpeg -i $1  -c:v libvpx-vp9 -crf 30 -b:v 0 -b:a 128k -c:a libopus $2
}


kpf(){
    if [[ -z "$1" ||  -z "$2" ]]; then
        echo "Port-Forward from a local pod in a namespace(optional). If no namespace is passed, it uses default"
        echo "Usage: kex \$POD_ID  \$LOCAL_PORT:REMOTE_PORT (8080:8080) \$POD_NAMESPACE"
    else
        kubectl port-forward $1 $2 -n $3 
    fi
}

klg(){
    if [[ -z "$1" ]]; then
        echo "Shows continuous logs from a pod in a namespace(optional). If no namespace is passed, it uses default"
        echo "Usage: kex \$POD_ID  \$POD_NAMESPACE"
    else
        kubectl logs $1 -n $2 -f
    fi
}


function jwt-decode() {
  sed 's/\./\n/g' <<< $(cut -d. -f1,2 <<< $1) | base64 --decode | jq
}

function 64e() {
  echo -n $1 | base64
}

function 64d() {
  echo -n $1 | base64 --decode
}

function coward() {
  REAL_COMMAND=kubectl
  if [[ $1 == "delete" ]] ; then
     echo "Your are currently in this cluster "
     echo $(kubectx -c)
     echo "\n"
     read "response?Are you really really sure?(y to confirm) "

    if [[ $response == "y" ]] ; then
        echo "$REAL_COMMAND ${@:1}"
        $REAL_COMMAND ${@:1} 
    else
        echo "You coward"
    fi
  fi
}

function kubeconfirm() {
  REAL_COMMAND=kubectl
  echo "Current Cluster:"
  echo $(kubectx -c)
  echo "\n"
  read "response?Are you really really sure?(n to decline) "
  if [[ $response == "n" ]] ; then
    echo "You coward"
  else
    echo "$REAL_COMMAND ${@:1}"
    $REAL_COMMAND ${@:1} 
  fi
}

function eksCoward() {
  REAL_COMMAND=eks
  if [[ $1 == "delete" ]] ; then
     read "response?Are you really really sure?(y to confirm) "

    if [[ $response == "y" ]] ; then
        echo "$REAL_COMMAND ${@:1}"
        $REAL_COMMAND ${@:1} 
    else
        echo "You coward"
    fi
  fi
}

function updateBranch() {
  git fetch origin devel:devel
  git rebase devel
}

function endcheck() {
        kubectl get endpoints $1 -n $2 -o=jsonpath='{.subsets[*].addresses[*].ip}' | tr ' ' '\n' | xargs -I % kubectl get pods --field-selector=status.podIP=% -n $2
}

function getOrder() {
  if [[ $2 ]] ; then
    TOKEN=$2
  elif [[ ${UBER_TOKEN} ]] ; then
    TOKEN=${UBER_TOKEN}
  else
    echo "You must pass Uber Token or set the environment variable UBER_TOKEN"
    return
  fi
  curlie -X GET https://api.uber.com/v1/eats/cornershop/orders/$1\?tenancy\=uber/production -H "Authorization: Bearer ${TOKEN}"

}

function getUser() {
  if [[ -z $1 ]] ; then
    echo "You first argument must uber order uuid"
    return
  fi
  if [[ $2 ]] ; then
    TOKEN=$2
  elif [[ "${UBER_TOKEN}" ]] ; then
    TOKEN=${UBER_TOKEN}
  else
    echo "You must pass Uber Token or set the environment variable UBER_TOKEN"
    return
  fi
  curlie -X GET https://api.uber.com/v1/eats/cornershop/users/$1/profile\?tenancy\=uber/production -H "Authorization: Bearer ${TOKEN}"
}


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
